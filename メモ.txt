
3-1 リスト項目(HTMLのリスト表記)

# リスト

## 順番のかかわるリスト
- ol
ordered list

## 順番のかかわらないリスト
- ul
unordered list

## リストの項目
- li

1つめ
2つめ
3つめ
4つめ

3-2 定義リスト(HTMLのリスト表記)

# 情報がセットになったリスト

## 情報がセットになったリスト全体を示す
- dl

## 情報の項目名
- dt

## 情報の内容
- dd

例：質問と答え



4-1 アンカータグ(HTMLのリンク)

# アンカータグ

# アンカーとは
「錨(いかり)」
リンクの飛び先を指定する

# href属性
リンクの飛び先を指定するための属性

# id属性
ページの中のある特定の部分について名前をつける


4-2 相対パスと絶対パス(HTMLのリンク)
# 相対パスと絶対パス

# パス
Path = 道・通り道

# 相対パス
今いる場所を基準にして相手がどこにいるのか伝える書き方
- 今いる場所にある他のファイル：　ファイル名
- 今いる場所の「フォルダ」：　フォルダ名/ファイル名
- 今いる場所の1階層上にあるファイル：　../ファイル名
	- 1階層上：　../ファイル名
	- 2階層上：　../../ファイル名

# 絶対パス
相手がどこにいるのかを確実に伝える書き方 = URL


5-1 画像(HTMLのオブジェクト)
# 画像

# 画像を貼り付けるタグ
img
単独で使われるタグ
	- 「ここからここまで」のスタイルではない

# alt属性
alternative
画像がどんなモノなのかを伝える
読み上げブラウザでは画像の代わりに読み上げられる文章

# title属性
画像のタイトルを伝える
画像の上でマウスカーソルをしばらく置いておくと表示される

5-2 ファイルの読み込み(HTMLのオブジェクト)
# ファイルの読み込み

# linkタグ
スタイルシートを読み込むときに使う
Faviconを読み込むときに使う
	- favorite + icon ブックマークしたときに表示されるアイコン

# scriptタグ
Javascriptを読み込むときに使う
Javascriptを書くときに使う


5-3 iframe（HTMLのオブジェクト）

# iframe

# iframeタグ
iframe：　インラインフレーム
特定のファイルを、ページの一部に表示させる
- src属性: 表示させるファイルの場所を指定する
- width属性：インラインフレームの幅を指定する
^ height属性: インラインフレームの高さを指定する


5-4 コメント（HTMLのオブジェクト）
# コメント

<!--  -->
ctrl+/


6-1 行とセル（HTMLのテーブル）
# 行とセル

# テーブル
表
デザインをするために使うものではない

# 行
横一列　→　行
一つのデータの塊
- trタグ（テーブルレコード）

# セル
一つ一つのデータのこと・マスのこと
- tdタグ（テーブルデータ）
- thタグ（テーブルヘッダ）

<body>
		<table border="1">
			<tr>
				<th>日本語</th>
				<th>英語</th>
			</tr>
			<tr>
				<td>東京</td>
				<td>Tokyo</td>
			</tr>
			<tr>
				<td>大阪</td>
				<td>Osaka</td>
			</tr>
			<tr>
				<td>北海道</td>
				<td>Hokkaido</td>
			</tr>
			<tr>
				<td></td>
				<td>Okinawa</td>
			</tr>
		</table>
	</body>


6-2 テーブルのヘッダーとフッター（HTMLのテーブル）
# 表のヘッダー・フッター

# 表のヘッダー
- thead

# 表のフッター
- tfoot

# 表のボディー
- tbody

<td colspan="2">でセルを2個結合する


7-1 テキスト入力（HTMLのフォーム）
# テキスト入力欄

## テキスト入力のいろいろ
- 一行タイプ
	inputタグ / type="text"
- パスワードタイプ
	inputタグ / type~"password"
- 複数行入力できるもの
	textareaタグ


7-2 ラジオボタンとチェックボックス（HTMLのフォーム）
# ラジオボタンとチェックボックス

## 選択式入力のいろいろ
- 一つしか選択できない：　ラジオボタン / ドロップダウンメニュー
- 複数選択がっ可能：　チェックボックス

## ラジオボタン
- inputタグ / type="radio"
- name属性が同じものの中で一つしか選択できない
- value属性で送信する値を指定する

## チェックボックス
- inputタグ / type="checkbox"
- name属性が同じものがひとまとまりのデータ（配列）として扱われる
- value属性で送信する値を指定する

7-3 ドロップダウンメニュー（HTMLのフォーム）

# ドロップダウンメニュー

## 選択式入力のいろいろ
- 一つしか選択できない：　ラジオボタン / ドロップダウンメニュー
- 複数選択がっ可能：　チェックボックス

## ドロップダウンメニュー
- selectタグ
- selectタグに対してname属性を指定
- 項目ごとにoptionタグで内容を指定していく
- optionタグに対してvalue属性を指定して送信する値を決める

## optgroup
- 複数のoptionをグルーピングする
- メニューの種類分け

7-4 フォームのグルーピング（HTMLのフォーム）

# フォームのグルーピング（HTMLのフォーム）

## fieldset
複数の入力欄をまとめる

## legend
fieldsetでまとめえた項目の説明を書く

## label
入力欄のラベルとして利用する
入力欄のidに対してlabelのfor属性で指定する

※idはページに一つだけ


7-5 ボタンと送信（HTMLのフォーム）
# ボタンと送信（HTMLのフォーム）

## ボタン
- inputタグ / type="submit": 入力したデータを送信するときに押すボタン
- buttonタグ: JavaScriptなどを使い処理を実行するきっかけに使うボタン

## POST/GET
- POST
	データを裏でまとめて送る方式
- GET
	URLの一部としてデータを送る方式

	## formタグ
入力フォーム全体を囲み、ひとつのデータとして送信する単位を示す



1-1 CSSとは何か？（はじめてのCSS）
# CSSの基本（概念編）

## CSSの役割
HTML → 文書の構造を示すために書かれる
CSS → 文書の見た目を決めるために書かれる = デザインを決める

## CSSの書き方
- 必要な情報
	- どこの
	- 何を
	- どうする
		「h1の文字の大きさを50pxにする」
- どこに書くか
	- 直接書く（タグの中に書く / style属性）
	- HTMLファイルのheadタグの中にstyleタグで囲んで書く
	- 外部ファイルに記述して読み込む

## 外部CSSファイルのメリット
	- サイト全体を一つのCSSファイルでメンテナンスできる
	- 統一感のあるサイト構築が可能になる


1-2 CSSの書き方（はじめてのCSS）
# CSSの基本（技術編）

## 適用の優先順位
- あとに書いたものが優先される
- セレクタの書き方によって優先度が変わる
	1. 要素を特定したIDセレクタ（HTMLのタグとIDの併用）←ここじゃなきゃだめだ
	2. 要素を特定しないIDセレクタ（IDのみの利用）
	3. 要素を特定したclassセレクタ（HTMLタグとclassの併用）
	4. 要素を特定しないclassセレクタ（classのみの利用）
	5. タイプセレクタ（HTMLタグのみの利用）
	6.全称セレクタ（*を利用した指定）
- !importantをつけたものが優先される
- ユーザーの作っているスタイルなども優先度に含まれる
	1. ページ製作者の指定したCSS
	2. ユーザーが指定したスタイル
	3. ブラウザ独自のスタイル

## 用語
- セレクタ
	「どこの」を指定するために使われるもの
- プロパティ
	「何を」を指定するために使われるもの
- 値
	「どうする」を指定するために使われるもの

## CSS3
CSS2.1を拡張して、デザインの実現できる範囲を広げたもの
現在策定中
ブラウザによって対応状況が異なる→ブラウザごとに先行搭載している機能もある


## プレフィックス
CSS3の一部の機能はブラウザごとに先行搭載されている物があるので、
これを使うときにはプレフィックスが必要になる

- 書き方
	mozilla系: -moz-（CSS3のプロパティ）
	webkit系: -webkit-(CSS3のプロパティ)


1-3 style属性によるスタイル適用（はじめてのCSS）
# 直接CSSを書いてみる

## style属性を使う
それぞれのタグの中にstyle="(CSSの指定)"を追加していく


1-4 styleタグによるスタイル適用（はじめてのCSS）
# styleタグを使う

## styleタグ
headの中に記述
type="text/css"が必要


1-5 外部ファイルによるスタイル適用（はじめてのCSS）
# 外部ファイルからCSSを読み込む

## linkダグ
headの中に書く
rel="stylesheet"
type="text/css"
href="(ファイル名)"


2-1 インライン要素とブロック要素（CSSのセレクタ）
# インライン要素とブロック要素

## ブロック要素
ブロック単位で扱われる要素
- p
- div
- table
- h1~h6
前後が改行されえた形になる

## インライン要素
文章の一部を扱う要素
- a
- span
- img


2-2 classセレクタとidセレクタ（CSSのセレクタ）
# セレクタ
## タイプセレクタ
HTMLタグ

## idセレクタ
- HTML: id属性
- CSS: #(ハッシュ)を使って選択する（例： #test）
一つのページの中に1度しかその名前が出てこない

## classセレクタ
- HTML: class属性
- CSS: .を使って選択する（例： .test）
一つのページの中に何度もその名前が出てくる


2-3 CSSをまとめる（CSSのセレクタ）
# CSSをまとめる
効率よく書く、という意味合いでの「まとめる」

同じ設定にしたい部分はまとめて書く

## CSSファイルでまとめる
セレクタにカンマを使う

## HTMLファイルでまとめる
クラスを複数指定する(スペース区切りで一つのclass=""の中に。class=""が2個あると一つ目だけしか反映されなかった)


2-4 特殊なセレクタ（CSSのセレクタ）
# 特殊なセレクタ

## 親要素と子要素
- 親要素
外側にある要素
- 子要素
内側にある要素

## 特殊なセレクタの例
- ">"（大なり記号）
子セレクタ
子要素のみを対象とするセレクタ（孫要素には適用されない）

- "+"
隣接セレクタ
すぐ後ろの要素にのみ適用されるセレクタ

- "~"
間接セレクタ
兄弟関係にある要素を対象にするセレクタ
（同階層の後につづく要素に適用されるセレクタ）

2-5 属性セレクタ（CSSのセレクタ）
# 属性セレクタ

## HTMLには「属性」が設定されているものがある
<div class="xxxxx"></div>
このとき「class="xxxxx"」が属性・値になる（オプションとも言う）

## タグやクラス・IDを利用して選択していたものを属性を対象にできる
- 書き方
[属性名]
[属性名="値"]
他のセレクタと同じように使うことができる。


2-6 擬似要素（CSSのセレクタ）

## 疑似要素とは
動的に発生する事象を要素としてセレクタに使うためのもの

- まだ訪問していないリンク
	link
- 訪問済みのリンク
	visited
- フォーカスされている
	focus
- マウスポインタが乗っている
	hover
- （そのほかにもたくさんある）

## 書き方
:を書いた後に続けて疑似要素を書く


2-7 構造的な擬似要素（CSSのセレクタ）






















